{"version":3,"file":"api-test-poi-node-request.js","sourceRoot":"","sources":["../../../src/api-test-poi-node-request.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  NETWORK_CONFIG,\n  NetworkName,\n  TransactProofData,\n  GetTransactProofsParams,\n  GetBlockedShieldsParams,\n  NodeStatusAllNetworks,\n  ValidateTxidMerklerootParams,\n  SubmitTransactProofParams,\n  TXIDVersion,\n  SubmitLegacyTransactProofParams,\n  LegacyTransactProofData,\n  SubmitSingleCommitmentProofsParams,\n  SingleCommitmentProofsData,\n  GetMerkleProofsParams,\n  MerkleProof,\n  ValidatePOIMerklerootsParams,\n  BlindedCommitmentData,\n} from '@railgun-community/shared-models';\nimport {\n  GetLegacyTransactProofsParams,\n  GetPOIListEventRangeParams,\n  GetPOIMerkletreeLeavesParams,\n  GetPOIsPerBlindedCommitmentParams,\n  POISyncedListEvent,\n  POIsPerBlindedCommitmentMap,\n  SignedBlockedShield,\n  SignedPOIEvent,\n  SubmitPOIEventParams,\n} from '../../node/src/models/poi-types';\nimport axios, { AxiosError } from 'axios';\nimport debug from 'debug';\n\nconst dbg = debug('poi:request');\n\nexport class POINodeRequest {\n  private static getNodeRouteURL = (url: string, route: string): string => {\n    return `${url}/${route}`;\n  };\n\n  private static async getRequest<ResponseData>(\n    url: string,\n  ): Promise<ResponseData> {\n    try {\n      const { data }: { data: ResponseData } = await axios.get(url);\n      return data;\n    } catch (err) {\n      if (!(err instanceof AxiosError)) {\n        throw err;\n      }\n      const errMessage = err.message;\n      dbg(`ERROR ${url} - ${errMessage}`);\n      throw new Error(errMessage);\n    }\n  }\n\n  private static async postRequest<Params, ResponseData>(\n    url: string,\n    params: Params,\n  ): Promise<ResponseData> {\n    try {\n      const { data }: { data: ResponseData } = await axios.post(url, params);\n      return data;\n    } catch (err) {\n      if (!(err instanceof AxiosError)) {\n        throw err;\n      }\n      const errMessage = `${err.message}: ${err.response?.data}`;\n      dbg(`ERROR ${url} - ${errMessage}`);\n      throw new Error(errMessage);\n    }\n  }\n\n  static validateRailgunTxidMerkleroot = async (\n    nodeURL: string,\n    networkName: NetworkName,\n    txidVersion: TXIDVersion,\n    tree: number,\n    index: number,\n    merkleroot: string,\n  ): Promise<boolean> => {\n    const chain = NETWORK_CONFIG[networkName].chain;\n    const route = `validate-txid-merkleroot/${chain.type}/${chain.id}`;\n    const url = POINodeRequest.getNodeRouteURL(nodeURL, route);\n    const isValid = await POINodeRequest.postRequest<\n      ValidateTxidMerklerootParams,\n      boolean\n    >(url, {\n      txidVersion,\n      tree,\n      index,\n      merkleroot,\n    });\n    return isValid;\n  };\n\n  static getNodeStatusAllNetworks = async (\n    nodeURL: string,\n  ): Promise<NodeStatusAllNetworks> => {\n    const route = `node-status-v2`;\n    const url = POINodeRequest.getNodeRouteURL(nodeURL, route);\n\n    const nodeStatusAllNetworks =\n      await POINodeRequest.getRequest<NodeStatusAllNetworks>(url);\n    return nodeStatusAllNetworks;\n  };\n\n  static getPOIListEventRange = async (\n    nodeURL: string,\n    networkName: NetworkName,\n    txidVersion: TXIDVersion,\n    listKey: string,\n    startIndex: number,\n    endIndex: number,\n  ): Promise<POISyncedListEvent[]> => {\n    const chain = NETWORK_CONFIG[networkName].chain;\n    const route = `poi-events/${chain.type}/${chain.id}`;\n    const url = POINodeRequest.getNodeRouteURL(nodeURL, route);\n\n    const poiEvents = await POINodeRequest.postRequest<\n      GetPOIListEventRangeParams,\n      POISyncedListEvent[]\n    >(url, {\n      txidVersion,\n      listKey,\n      startIndex,\n      endIndex,\n    });\n    return poiEvents;\n  };\n\n  static getPOIMerkletreeLeaves = async (\n    nodeURL: string,\n    networkName: NetworkName,\n    txidVersion: TXIDVersion,\n    listKey: string,\n    startIndex: number,\n    endIndex: number,\n  ): Promise<string[]> => {\n    const chain = NETWORK_CONFIG[networkName].chain;\n    const route = `poi-merkletree-leaves/${chain.type}/${chain.id}`;\n    const url = POINodeRequest.getNodeRouteURL(nodeURL, route);\n\n    const poiMerkletreeLeaves = await POINodeRequest.postRequest<\n      GetPOIMerkletreeLeavesParams,\n      string[]\n    >(url, {\n      txidVersion,\n      listKey,\n      startIndex,\n      endIndex,\n    });\n    return poiMerkletreeLeaves;\n  };\n\n  static getFilteredTransactProofs = async (\n    nodeURL: string,\n    networkName: NetworkName,\n    txidVersion: TXIDVersion,\n    listKey: string,\n    bloomFilterSerialized: string,\n  ): Promise<TransactProofData[]> => {\n    const chain = NETWORK_CONFIG[networkName].chain;\n    const route = `transact-proofs/${chain.type}/${chain.id}`;\n    const url = POINodeRequest.getNodeRouteURL(nodeURL, route);\n\n    const transactProofs = await POINodeRequest.postRequest<\n      GetTransactProofsParams,\n      TransactProofData[]\n    >(url, {\n      listKey,\n      txidVersion,\n      bloomFilterSerialized,\n    });\n    return transactProofs;\n  };\n\n  static getFilteredLegacyTransactProofs = async (\n    nodeURL: string,\n    networkName: NetworkName,\n    txidVersion: TXIDVersion,\n    bloomFilterSerialized: string,\n  ): Promise<LegacyTransactProofData[]> => {\n    const chain = NETWORK_CONFIG[networkName].chain;\n    const route = `legacy-transact-proofs/${chain.type}/${chain.id}`;\n    const url = POINodeRequest.getNodeRouteURL(nodeURL, route);\n\n    const transactProofs = await POINodeRequest.postRequest<\n      GetLegacyTransactProofsParams,\n      LegacyTransactProofData[]\n    >(url, {\n      txidVersion,\n      bloomFilterSerialized,\n    });\n    return transactProofs;\n  };\n\n  static getFilteredBlockedShields = async (\n    nodeURL: string,\n    networkName: NetworkName,\n    txidVersion: TXIDVersion,\n    listKey: string,\n    bloomFilterSerialized: string,\n  ): Promise<SignedBlockedShield[]> => {\n    const chain = NETWORK_CONFIG[networkName].chain;\n    const route = `blocked-shields/${chain.type}/${chain.id}`;\n    const url = POINodeRequest.getNodeRouteURL(nodeURL, route);\n\n    const signedBlockedShields = await POINodeRequest.postRequest<\n      GetBlockedShieldsParams,\n      SignedBlockedShield[]\n    >(url, {\n      listKey,\n      txidVersion,\n      bloomFilterSerialized,\n    });\n    return signedBlockedShields;\n  };\n\n  static submitTransactProof = async (\n    nodeURL: string,\n    networkName: NetworkName,\n    txidVersion: TXIDVersion,\n    listKey: string,\n    transactProofData: TransactProofData,\n  ): Promise<void> => {\n    const chain = NETWORK_CONFIG[networkName].chain;\n    const route = `submit-transact-proof/${chain.type}/${chain.id}`;\n    const url = POINodeRequest.getNodeRouteURL(nodeURL, route);\n\n    await POINodeRequest.postRequest<SubmitTransactProofParams, void>(url, {\n      txidVersion,\n      listKey,\n      transactProofData,\n    });\n  };\n\n  static submitLegacyTransactProof = async (\n    nodeURL: string,\n    networkName: NetworkName,\n    txidVersion: TXIDVersion,\n    legacyTransactProofData: LegacyTransactProofData,\n  ): Promise<void> => {\n    const chain = NETWORK_CONFIG[networkName].chain;\n    const route = `submit-legacy-transact-proofs/${chain.type}/${chain.id}`;\n    const url = POINodeRequest.getNodeRouteURL(nodeURL, route);\n\n    await POINodeRequest.postRequest<SubmitLegacyTransactProofParams, void>(\n      url,\n      {\n        txidVersion,\n        listKeys: [],\n        legacyTransactProofDatas: [legacyTransactProofData],\n      },\n    );\n  };\n\n  static submitSingleCommitmentProof = async (\n    nodeURL: string,\n    networkName: NetworkName,\n    txidVersion: TXIDVersion,\n    singleCommitmentProofsData: SingleCommitmentProofsData,\n  ): Promise<void> => {\n    const chain = NETWORK_CONFIG[networkName].chain;\n    const route = `submit-single-commitment-proofs/${chain.type}/${chain.id}`;\n    const url = POINodeRequest.getNodeRouteURL(nodeURL, route);\n\n    await POINodeRequest.postRequest<SubmitSingleCommitmentProofsParams, void>(\n      url,\n      {\n        txidVersion,\n        singleCommitmentProofsData,\n      },\n    );\n  };\n\n  static submitPOIEvent = async (\n    nodeURL: string,\n    networkName: NetworkName,\n    txidVersion: TXIDVersion,\n    listKey: string,\n    signedPOIEvent: SignedPOIEvent,\n    validatedMerkleroot: string,\n  ): Promise<void> => {\n    const chain = NETWORK_CONFIG[networkName].chain;\n    const route = `submit-poi-event/${chain.type}/${chain.id}`;\n    const url = POINodeRequest.getNodeRouteURL(nodeURL, route);\n\n    await POINodeRequest.postRequest<SubmitPOIEventParams, void>(url, {\n      txidVersion,\n      listKey,\n      signedPOIEvent,\n      validatedMerkleroot,\n    });\n  };\n\n  static getMerkleProofs = async (\n    nodeURL: string,\n    networkName: NetworkName,\n    txidVersion: TXIDVersion,\n    listKey: string,\n    blindedCommitments: string[],\n  ): Promise<MerkleProof[]> => {\n    const chain = NETWORK_CONFIG[networkName].chain;\n    const route = `merkle-proofs/${chain.type}/${chain.id}`;\n    const url = POINodeRequest.getNodeRouteURL(nodeURL, route);\n\n    return POINodeRequest.postRequest<GetMerkleProofsParams, MerkleProof[]>(\n      url,\n      {\n        txidVersion,\n        listKey,\n        blindedCommitments,\n      },\n    );\n  };\n\n  static getPOIStatusPerBlindedCommitment = async (\n    nodeURL: string,\n    networkName: NetworkName,\n    txidVersion: TXIDVersion,\n    listKey: string,\n    blindedCommitmentDatas: BlindedCommitmentData[],\n  ): Promise<POIsPerBlindedCommitmentMap> => {\n    const chain = NETWORK_CONFIG[networkName].chain;\n    const route = `pois-per-blinded-commitment/${chain.type}/${chain.id}`;\n    const url = POINodeRequest.getNodeRouteURL(nodeURL, route);\n\n    return POINodeRequest.postRequest<\n      GetPOIsPerBlindedCommitmentParams,\n      POIsPerBlindedCommitmentMap\n    >(url, {\n      txidVersion,\n      listKey,\n      blindedCommitmentDatas,\n    });\n  };\n\n  static validatePOIMerkleroots = async (\n    nodeURL: string,\n    networkName: NetworkName,\n    txidVersion: TXIDVersion,\n    listKey: string,\n    poiMerkleroots: string[],\n  ): Promise<boolean> => {\n    const chain = NETWORK_CONFIG[networkName].chain;\n    const route = `validate-poi-merkleroots/${chain.type}/${chain.id}`;\n    const url = POINodeRequest.getNodeRouteURL(nodeURL, route);\n\n    return POINodeRequest.postRequest<ValidatePOIMerklerootsParams, boolean>(\n      url,\n      {\n        txidVersion,\n        listKey,\n        poiMerkleroots,\n      },\n    );\n  };\n}\n"]}